var winExportWS;
var count_aff_wsEditor = 0;
var conn = new Ext.data.Connection();
var manageWServiceEditTreeAuth = "auth";
var manageWServiceEditTreeUnAuth = "unauth";
var webServicesToolbar = new Ext.Toolbar();
var webServiceKeysToolbar = new Ext.Toolbar();

var frmDataStore = new Ext.data.JsonStore ( {
		autoDestroy: true,
		url: '?act=loadInterface&lt=FrmData',
		root: 'items',
		idProperty: 'id',
		fields: ['id', 'name', 'version']
	}
);

var manageWServiceEditorMainMenu = new Ext.menu.Menu ( {
		id: 'manage-ws-editor-main-menu',
		items: [ {
				text: 'Generate SDK',
				icon: '<?php echo $this->get('img')?>page_white_paint.png',
				handler: confirmGenerateSDKWS
			},
				'-', {
				text: 'Delete',
				icon: '<?php echo $this->get('img')?>cross.png',
				handler: confirmDeleteWService
			}, {
				text: 'Export',
				icon: '<?php echo $this->get('img')?>export.png',
				handler: confirmExportWService
			}
		]
	}
);

webServicesToolbar.add
(
	{
		text:'Save',
		tooltip: 'Save modifications',
		icon: '<?php echo $this->get('img')?>save.png',
		handler: function() {
			var	description = Ext.get('manage-wservice-description').dom.value;
			var	updateFrom = Ext.get('url-update-ws').dom.value;
			var	updateCheck = Ext.get('check-update-ws').dom.value;
			var	version = Ext.get('manage-wservice-version').dom.value;
			var	revision = Ext.get('manage-wservice-revision').dom.value;
			
			var updateAuto = '0';
			if (Ext.get('auto-update-ws').dom.checked) {
				var updateAuto = '1';
			}
			
			var req = conn.request ( {
					url: '?act=execPlg&plg=manageWServices',
					method: 'POST',
					params: "data=" + 'editByEditor::' + manageWServiceEditTreeAuth + '::' + manageWServiceEditTreeUnAuth + '::' + description + '::' + wservicesListingEditorGrid.selModel.getSelected().json.id + '::' + updateFrom + '::' + updateCheck + '::' + updateAuto + '::' + version + '::' + revision,
					success: function(resObj) {
						if (resObj.responseText == "success") {
							wservicesDataStore.reload();
						}
						else {
							msgError(resObj.responseText);
						}
					}
				}
			);
		}
	}, {
		text:'Menu',
		menu: manageWServiceEditorMainMenu
	}
);

var manageWSKeysMenu = new Ext.menu.Menu ( {
		items: [ {
				text: 'Activate',
				icon: '<?php echo $this->get('img')?>accept.png',
				handler: confirmActivateKEYWS
			}, {
				text: 'Revoke',
				icon: '<?php echo $this->get('img')?>stop.png',
				handler: confirmRevokeKEYWS
			}, {
				text: 'Re-generate Keys',
				icon: '<?php echo $this->get('img')?>page_white_key.png',
				handler: confirmUpdateKEYWS
			}
		]
	}
);

webServiceKeysToolbar.add ( {
		text:'Create',
		tooltip: 'Create a new pair of key',
		icon: '<?php echo $this->get('img')?>key_add.png',
		handler: confirmCreateKEYWS
	}, {
		text:'Delete',
		tooltip: 'Delete the selected keys',
		icon: '<?php echo $this->get('img')?>key_delete.png',
		handler: confirmDeleteKEYWS
	}, {
		text:'Menu',
		menu: manageWSKeysMenu
	}
);

var manageWServices = {
	id: 'manageWServices-panel',
	title: 'EnsKa Core Manager - Manage WEB Services',
	contentEl: 'manageWServices-content',
	autoScroll: true,
	items: [
		webServicesToolbar
	]
};

var wservicesDataStore = new Ext.data.Store ( {
		id: 'wservices-datastore',
		proxy: new Ext.data.HttpProxy ( {
				url:'?act=loadInterface&lt=WServicesGrid'
			}
		),
		reader: new Ext.data.JsonReader ( {
				root: 'results',
				totalProperty: 'total',
				id: 'id'
			}, [ 
				{name: 'ID', type: 'int', mapping: 'id', width: 5},
				{name: 'Name', type: 'string', mapping: 'name', width: 200},
				{name: 'Website', type: 'string', mapping: 'website', width: 15},
				{name: 'Domain', type: 'string', mapping: 'domain', width: 600},
				{name: 'Description', type: 'string', mapping: 'description'},
				{name: 'Version', type: 'string', mapping: 'version'},
				{name: 'Revision', type: 'int', mapping: 'revision'},
				{name: 'UpdateFrom', type: 'string', mapping: 'maj_link'},
				{name: 'UpdateCheck', type: 'string', mapping: 'maj_check'},
				{name: 'UpdateAuto', type: 'int', mapping: 'maj_auto'}
			]
		),
		sortInfo: {
			field: 'ID',
			direction: "ASC"
		}
	}
);

var wservicesColumnModel = new Ext.grid.ColumnModel ( [ {
			header: '#',
			readOnly: true,
			dataIndex: 'ID',
			width: 25
		}, {
			header: 'Name',
			dataIndex: 'Name',
			width: 500,
			readOnly: true
		}, {
			header: 'Container',
			dataIndex: 'Website',
			readOnly: true,
			width: 200
		}, {
			header: 'Description',
			dataIndex: 'Description',
			width: 500,
			editor: new Ext.form.TextField ( {
				  allowBlank: false
				  /*maskRe: /([a-zA-Z0-9\s]+)$/*/
				}
			)
		}
	]
);
wservicesColumnModel.defaultSortable = true;

var wservicesListingEditorGrid =  new Ext.grid.EditorGridPanel ( {
		id: 'wservicesListingEditorGrid',
		store: wservicesDataStore,
		cm: wservicesColumnModel,
		enableColLock:false,
		clicksToEdit:2,
		selModel: new Ext.grid.RowSelectionModel ( {
				singleSelect: true
			}
		),
		height: 300,
		anchor:'95%',
		stateful: false
	}
);

var wsKeysDataStore = new Ext.data.Store ( {
		id: 'wsKeys-datastore',
		proxy: new Ext.data.HttpProxy ( {
				url:'?act=loadInterface&lt=WSKeysGrid'
			}
		),
		reader: new Ext.data.JsonReader ( {
				root: 'results',
				totalProperty: 'total',
				id: 'id'
			}, [ 
				{name: 'ID', type: 'int', mapping: 'id', width: 5},
				{name: 'API', type: 'int', mapping: 'api', width: 200},
				{name: 'Public', type: 'string', mapping: 'public_key', width: 15},
				{name: 'Private', type: 'string', mapping: 'private_key', width: 600},
				{name: 'Status', type: 'string', mapping: 'status', width: 600}
			]
		),
		sortInfo: {
			field: 'ID', 
			direction: "ASC"
		}
	}
);

var wsKeysColumnModel = new Ext.grid.ColumnModel ( [ {
			header: '#',
			readOnly: true,
			dataIndex: 'ID',
			width: 25
		}, {
			header: 'Public key',
			dataIndex: 'Public',
			width: 500,
			readOnly: true,
			editor: new Ext.form.TextField ( {
				  allowBlank: false
				}
			)
		}, {
			header: 'Private key',
			dataIndex: 'Private',
			readOnly: true,
			width: 200,
			editor: new Ext.form.TextField ( {
				  allowBlank: false
				}
			)
		}, {
			header: 'Status',
			dataIndex: 'Status',
			readOnly: true,
			width: 200
		}
	]
);
wsKeysColumnModel.defaultSortable = true;

var wsKeysListingEditorGrid =  new Ext.grid.EditorGridPanel ( {
		id: 'wsKeysListingEditorGrid',
		store: wsKeysDataStore,
		cm: wsKeysColumnModel,
		enableColLock:false,
		clicksToEdit:2,
		selModel: new Ext.grid.RowSelectionModel ( {
				singleSelect: true
			}
		),
		height: 200,
		border: false,
		anchor:'100%',
		stateful: false
	}
);

var manageWServiceEditUsers = new Ext.tree.TreePanel ( {
		title: 'Users',
		id:'manage-wservice-users-panel',
		cellCls:'td-new-website-users-panel',
		iconCls:'icon-users',
		border:true,
		height: 175,
		xtype: 'treepanel',
		autoScroll: true,
		rootVisible: true,
		lines: true,
		singleExpand: false,
		useArrows: true,
		animate: true,
		dataUrl:'?act=loadInterface&lt=Users',
		enableDD:true,
		ddGroup:'listUsr',
		root: {
			nodeType: 'async',
			draggable:false,
			text: 'Users',
			id:'node-root',
			iconCls:'tree-server'
		}
	}
);

var manageWServiceEditAuth = new Ext.tree.TreePanel ( {
		title: 'Authorized users',
		id:'manage-wservice-auth-users-panel',
		cellCls:'td-new-website-auth-users-panel',
		iconCls:'icon-user-auth',
		border:true,
		height: 175,
		xtype: 'treepanel',
		autoScroll: true,
		rootVisible: true,
		lines: true,
		singleExpand: true,
		useArrows: true,
		animate: true,
		dataUrl:'?act=loadInterface&lt=AUTHUsers',
		enableDD:true,
		ddGroup:'listUsr',
		root: {
			nodeType: 'async',
			draggable:false,
			text: 'Users',
			iconCls:'tree-valid'
		},
		listeners: {
			append: function (tree, parent, node, index) {
				manageWServiceEditTreeAuth = manageWServiceEditTreeAuth + "/" + node.id
			},
			beforemovenode: function (tree, node, oldParent, newParent, index) {
				var newAuth = "";
				var tmpAuth = manageWServiceEditTreeAuth.split('/');
				for (i=0; i<tmpAuth.length; i++) {
					if((tmpAuth[i] != node.id) && (node.id != '') && (tmpAuth[i] != '')) {
						newAuth = newAuth + tmpAuth[i] + '/';
						if ((i+1) < tmpAuth.length) {
							newAuth = newAuth + '/';
						}
					}
				}
				manageWServiceEditTreeAuth = newAuth;
			}
			
		}
	}
);

var manageWServiceEditUnAuth = new Ext.tree.TreePanel ( {
		title: 'Unauthorized users',
		id:'manage-wservice-unauth-users-panel',
		cellCls:'td-new-website-unauth-users-panel',
		iconCls:'icon-user-unauth',
		border:true,
		height: 175,
		xtype: 'treepanel',
		autoScroll: true,
		rootVisible: true,
		lines: true,
		singleExpand: true,
		useArrows: true,
		animate: true,
		dataUrl:'?act=loadInterface&lt=UNAUTHUsers',
		enableDD:true,
		ddGroup:'listUsr',
		root: {
			nodeType: 'async',
			draggable:false,
			text: 'Users',
			iconCls:'tree-stop'
		},
		listeners: {
			append: function (tree, parent, node, index) {
				manageWServiceEditTreeUnAuth = manageWServiceEditTreeUnAuth + "/" + node.id
			},
			beforemovenode: function (tree, node, oldParent, newParent, index) {
				var newUnAuth = "";
				var tmpUnAuth = manageWServiceEditTreeUnAuth.split('/');
				for (i=0; i<tmpUnAuth.length; i++) {
					if((tmpUnAuth[i] != node.id) && (node.id != '') && (tmpUnAuth[i] != '')) {
						newUnAuth = newUnAuth + tmpUnAuth[i];
						if ((i+1) < tmpUnAuth.length) {
							newUnAuth = newUnAuth + '/';
						}
					}
				}
				manageWServiceEditTreeUnAuth = newUnAuth;
			}
		}
	}
);

var manageWServiceWizard =  {
	xtype:'tabpanel',
	id: 'manage-wservice-wizard',
	plain: false,
	border: false,
	height: 230,
	deferredRender: false,
	defaults:{bodyStyle:'padding:0px'},
	contentEl: 'manageWServiceEditStart',
	items: [ {
			title:'Basics informations',
			id: 'manage-wservice-informations-form',
			iconCls:'icon-infos',
			layout:'form',
			xtype: 'form',
			html: '<div style="padding: 5px; background: whie; color: royalblue; font-size: 20px; font-weight: bold; width: 128px; height: 128px; top: -180px; left: -200px; position: relative;"><img src="<?php echo $this->get('img')?>ws_b.png" width=128 height=128></div>',
			defaults: {width: 230},
			bodyStyle: 'padding-left: 230px; padding-top: 50px;',
			items: [ {
					id:'manage-wservice-name',
					fieldLabel: 'Name',
					anchor:'95%',
					xtype: 'textfield',
					readOnly: true
				}, {
					id:'manage-wservice-website',
					fieldLabel: 'Container',
					anchor:'95%',
					xtype: 'textfield',
					readOnly: true
				}, {
					id:'manage-wservice-version',
					fieldLabel: 'Version',
					anchor:'95%',
					xtype: 'textfield'
				}, {
					id:'manage-wservice-revision',
					fieldLabel: 'Revision',
					anchor:'95%',
					xtype: 'textfield',
					readOnly: true
				},
				new Ext.form.TextArea ( {
						id:'manage-wservice-description',
						wrap:'on',
						anchor:'95%',
						fieldLabel: 'Description',
					}
				)
			]
		}, {	
			title:'Security',
			iconCls:'icon-lock-break',
			baseCls:'x-plain',
			layout:'table',
			layoutConfig: {
				columns: 3
			},
			items: [
				manageWServiceEditUsers,
				manageWServiceEditAuth,
				manageWServiceEditUnAuth
			]
		}, {
			cls:'x-plain',
			title:'Keys',
			iconCls:'icon-key',
			layout:'form',
			items: [
				webServiceKeysToolbar,
				wsKeysListingEditorGrid
			]
		}, {
			title:'Live update',
			iconCls:'icon-drive-web',
			id: 'manage-ws-update-form',
			bodyStyle: 'padding: 10px;',
			contentEl: 'live-update-wservices'
		}
	]
};
manageWServiceEditUsers.getRootNode().expand();

var wsEditor = new Ext.Panel ( {
		id: 'wserviceEditor',
		height: 280,
		border: false,
		items: [
			manageWServiceWizard
		]
	}
);

wsEditor.render('wserviceEditorRender');
wservicesDataStore.load();
wservicesListingEditorGrid.render('wserviceGridRender');
wsKeysDataStore.load();

function saveGridWService(oGrid_event)
{
	var id = oGrid_event.record.data.ID;
	var	description = oGrid_event.record.data.Description;
	
	var req = conn.request ( {
			url: '?act=execPlg&plg=manageWServices',
			method: 'POST',
			params: "data=" + 'editByGrid::' + id + '::' + description,
			success: function(resObj) {
				if (resObj.responseText == "success") {
					wservicesDataStore.commitChanges();
					wservicesDataStore.reload();
				}
				else {
					msgError(resObj.responseText);
					wservicesDataStore.reload();
				}
			}
		}
	);	
}

function confirmDeleteWService()
{
	if(wservicesListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want delete ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', deleteWService);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a web service!');
	}
}

function deleteWService(btn)
{
	if(btn == 'yes') {
		var id = wservicesListingEditorGrid.selModel.getSelected().json.id;
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'delete::' + id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						resetWServiceEditor();
						wservicesDataStore.reload();
						wsDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
						wservicesDataStore.reload();
						
					}
				}
			}
		);
		
	} 
}

function confirmCreateKEYWS()
{
	if(wservicesListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want create a new pair of key for API ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', createKeysWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a web service!');
	}
}

function createKeysWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'editKeys::createKeys::' + wservicesListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
						wsKeysDataStore.proxy.conn.url = keysLoader;
						wsKeysDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}

function confirmDeleteKEYWS()
{
	if(wsKeysListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want delete the selected pair of key for API ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', deleteKeysWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a pair of key!');
	}
}

function deleteKeysWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'editKeys::deleteKeys::' + wsKeysListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
						wsKeysDataStore.proxy.conn.url = keysLoader;
						wsKeysDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}

function confirmActivateKEYWS()
{
	if(wsKeysListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want activate the selected key for API ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', activateKeysWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a key!');
	}
}

function activateKeysWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'editKeys::activateKeys::' + wsKeysListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
						wsKeysDataStore.proxy.conn.url = keysLoader;
						wsKeysDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}

function confirmRevokeKEYWS()
{
	if(wsKeysListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want revoke the selected key for API ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', revokeKeysWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a key!');
	}
}

function revokeKeysWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'editKeys::revokeKeys::' + wsKeysListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
						wsKeysDataStore.proxy.conn.url = keysLoader;
						wsKeysDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}

function confirmUpdateKEYWS()
{
	if(wsKeysListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want re-generate the selected pair of key for API ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', updateKeysWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a pair of key!');
	}
}

function updateKeysWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'editKeys::updateKeys::' + wsKeysListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
						wsKeysDataStore.proxy.conn.url = keysLoader;
						wsKeysDataStore.reload();
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}

function confirmGenerateSDKWS()
{
	if(wservicesListingEditorGrid.selModel.getCount() == 1) {
		Ext.MessageBox.confirm('EnsKa Core Manager','Are you sure you want generate the SDK for the selected web service ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' ?', generateSDKWS);
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a web service!');
	}
}

function generateSDKWS(btn)
{
	if(btn == 'yes') {
		var req = conn.request ( {
				url: '?act=execPlg&plg=manageWServices',
				method: 'POST',
				params: "data=" + 'generateSDK::' + wservicesListingEditorGrid.selModel.getSelected().json.id,
				success: function(resObj) {
					if (resObj.responseText == "success") {
						msgOk('The SDK for ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' has been generated !');
					}
					else {
						msgError(resObj.responseText);
					}
				}
			}
		);
	}
}


function confirmExportWService()
{
	if(wservicesListingEditorGrid.selModel.getCount() == 1) {
		exportWS('yes');
	}
	else {
		Ext.MessageBox.alert('EnsKa Core Manager','You must select a web service!');
	}
}

function exportWS(btn)
{
	if(btn == 'yes') {
		winExportWS = new Ext.Window ( {
				closeAction: 'close',
				layout: "fit",
				modal: true,
				resizable: false,
				closable: true,
				title: "Export the web service " + wservicesListingEditorGrid.selModel.getSelected().json.name,
				width: 500,
				height: 250,
				border: false,
				items: [
					exportWSWizard
				]
			}
		);
		winExportWS.show();
	}
}

var exportWSWizard =  {
	xtype:'tabpanel',
	plain: false,
	activeTab: 0,
	height:200,
	deferredRender: false,
	defaults:{bodyStyle:'padding:0px'},
	items: [ {
			title:'Export information',
			iconCls:'icon-infos',
			layout:'form',
			xtype: 'form',
			html: '<div style="padding: 5px; background: whie; color: royalblue; font-size: 20px; font-weight: bold; width: 128px; height: 128px; top: -110px; left: -200px; position: relative;"><img src="<?php echo $this->get('img')?>export_b.png" width=128 height=128></div>',
			defaults: {width: 230},
			bodyStyle: 'padding-left: 230px; padding-top: 60px;',
			items: [ {
					xtype: 'checkbox',
					id:'is-ws-release',
					fieldLabel: 'Create a release point',
					anchor:'95%'
				}, {
					xtype: 'checkbox',
					id:'is-ws-export-keys',
					fieldLabel: 'Export the keys',
					anchor:'95%'
				}
			]
		}
	],
	buttons: [ {
			text: 'Export',
			handler: function() {
				var release = 2;
				if (Ext.get('is-ws-release').dom.checked) {
					var release = 1;
				}
				
				var keys = 2;
				if (Ext.get('is-ws-export-keys').dom.checked) {
					var keys = 1;
				}
				
				msgWait('EnsKa Core is exporting the web service ' + wservicesListingEditorGrid.selModel.getSelected().json.name +'...');
				
				var req = conn.request ( {
						url: '?act=execPlg&plg=manageWServices',
						method: 'POST',
						params: "data=" + 'export::' + wservicesListingEditorGrid.selModel.getSelected().json.id + '::' + release + '::' + keys,
						success: function(resObj) {
							if (resObj.responseText == 'success') {
								msgOk('The web service ' + wservicesListingEditorGrid.selModel.getSelected().json.name + ' has been exported !');
								if (release == 1) {
									var	up = wservicesListingEditorGrid.selModel.getSelected().json.revision
									up++;
									Ext.get('manage-wservice-revision').dom.value = up;
									wservicesDataStore.reload();
								}
								winExportWS.close();
							}
							else {
								msgError(resObj.responseText);
							}
						}
					}
				);
			}
		}, {
			text: 'Cancel',
			handler: function() {
				winExportWS.close();
			}
		}
	]
};

function fillWServiceEditor()
{
	
	if (count_aff_wsEditor == 0) {
		Ext.getCmp('manage-wservice-wizard').activate('manage-wservice-informations-form');
		count_aff_wsEditor++;
	}
	
	Ext.get('manage-wservice-name').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.name;
	Ext.get('manage-wservice-website').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.website;
	Ext.get('manage-wservice-version').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.version;
	Ext.get('manage-wservice-revision').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.revision;
	Ext.get('manage-wservice-description').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.description;
	Ext.get('check-update-ws').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.maj_check;
	Ext.get('live-update-infos-ws').update('');
	
	Ext.get('url-update-ws').dom.value = wservicesListingEditorGrid.selModel.getSelected().json.maj_link;
	if (wservicesListingEditorGrid.selModel.getSelected().json.maj_link == 'none') {
		Ext.get('url-update-ws').dom.value = '';
	}
	
	Ext.get('auto-update-ws').dom.checked = false;
	if (wservicesListingEditorGrid.selModel.getSelected().json.maj_auto == 1) {
		Ext.get('auto-update-ws').dom.checked = true;
	}
	
	manageWebsiteEditTreeAuth = "auth";
	manageWebsiteEditTreeUnAuth = "unauth";
	var unAuthLoader = '?act=loadInterface&lt=Users&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id + ';2;pb.ws_auth';
	var authLoader = '?act=loadInterface&lt=Users&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id + ';1;pb.ws_auth';
	var	keysLoader = '?act=loadInterface&lt=WSKeysGrid&data=' + wservicesListingEditorGrid.selModel.getSelected().json.id;
	
	Ext.getCmp('manage-wservice-auth-users-panel').loader.dataUrl = authLoader;
	Ext.getCmp('manage-wservice-unauth-users-panel').loader.dataUrl = unAuthLoader;
	wsKeysDataStore.proxy.conn.url = keysLoader;
	
	Ext.getCmp('manage-wservice-auth-users-panel').root.reload();
	Ext.getCmp('manage-wservice-unauth-users-panel').root.reload();
	Ext.getCmp('manage-wservice-users-panel').root.reload();
	wsKeysDataStore.reload();
}

function resetWServiceEditor()
{	
	Ext.get('manage-wservice-name').dom.value = "";
	Ext.get('manage-wservice-website').dom.value = "";
	Ext.get('manage-wservice-version').dom.value = "";
	Ext.get('manage-wservice-revision').dom.value = "";
	Ext.get('manage-wservice-description').dom.value = "";
	
	Ext.get('url-update-ws').dom.value = '';
	Ext.get('auto-update-ws').dom.checked = false;
	Ext.get('check-update-ws').dom.value = 'D';
	
	manageWServiceEditTreeAuth = "auth";
	manageWServiceEditTreeUnAuth = "unauth";
}

function checkUpdateWS()
{
	msgWait('EnsKa Core is checking update for <i><b>' + wservicesListingEditorGrid.selModel.getSelected().json.name + '</i></b>...');	
	var req = conn.request ( {
			url: '?act=execPlg&plg=managePlugins',
			method: 'POST',
			params: "data=" + 'checkUpdate::' + wservicesListingEditorGrid.selModel.getSelected().json.revision + '::' + wservicesListingEditorGrid.selModel.getSelected().json.maj_link,
			success: function(resObj) {
				var	msgTab = resObj.responseText.split(';');
				if (msgTab[0] == 'success') {
					msgOk('New update is available for web service <i><b>' + wservicesListingEditorGrid.selModel.getSelected().json.name + '</i></b>');
					Ext.get('live-update-infos-ws').update('<span style="color: green;">New update is available!<br>Version :<b>' + msgTab[2] +'</b><br>Revision :<b>' + msgTab[1] + '</b><br>Size :<b>' + msgTab[3] +'</b><br>Release date :<b>' + msgTab[4] + '</b><br><input type="button" id="btn-update-app" value="Update now" /></span>');
				}
				else {
					var	msgTab = resObj.responseText.split(';');
					if (msgTab[0] == 'err') {
						msgError(msgTab[1]);
						Ext.get('live-update-infos-ws').update('<span style="color: red;">Error on get update!<br>' + msgTab[1] +'</span>');
					}
					else {
						msgOk('No new update is available for web service <i><b>' + wservicesListingEditorGrid.selModel.getSelected().json.name + '</i></b>');
						Ext.get('live-update-infos-ws').update('<span style="color: royalblue;">The web service ' + wservicesListingEditorGrid.selModel.getSelected().json.name +' is up to date!</span>');
					}
				}
			}
		}
	);
}

wservicesListingEditorGrid.on('afteredit', saveGridWService);
wservicesListingEditorGrid.on('rowClick', fillWServiceEditor);
Ext.get('btn-check-update-ws').on('click', checkUpdateWS);